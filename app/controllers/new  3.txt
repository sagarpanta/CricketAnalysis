class AnalysisController < ApplicationController
  def index
	begin
		if signed_in?
			if current_user.username == 'admin'
				@current_client = current_user.username
				@countries = Country.all

				@players = Player.all

				@tournaments = Tournament.all

				@venues = Venue.all

				#@teams = Team.group(:teamid, :teamname).select('teamid, teamname')
				@teams = Team.select('distinct teamid, teamname')
				@coaches = Coach.all

				@managers = Manager.all
			else
				@tournaments = Tournament.where('clientkey=?', current_user.id ).all
				@countries = Country.where('clientkey=?', current_user.id )

				@players = Player.where('clientkey=?', current_user.id )

				@tournaments = Tournament.where('clientkey=?', current_user.id )

				@venues = Venue.where('clientkey=?', current_user.id )

				#@teams = Team.group(:teamid, :teamname).where('clientkey=?', current_user.id ).all
				@teams = Team.select('distinct teamid, teamname').where('clientkey=?', current_user.id )

				@coaches = Coach.where('clientkey=?', current_user.id )

				@managers = Manager.where('clientkey=?', current_user.id )
			end
		else 
			redirect_to signin_path
		end
		@formats = Format.all
		#@_matchformats = [{id:-2, name:'All'}]
		#@formats.each do |c|
		#	@_matchformats << {id:c.id, name:c.name}
		#end

		@battingstyles = Player.select('distinct battingstyle')
		@bowlingstyles = Player.select('distinct bowlingstyle')
		@bowlingtypes = Player.select('distinct bowlingtype')

		@playertypes = Player.select('playertype')
		
		@battingpositions = @bowlingpositions = [1,2,3,4,5,6,7,8,9,10,11]
		
		@dismissaltypes = Dismissal.all

		@matchtypes = MatchType.all
		
		@innings = [1,2,3,4]

		@teamtypes = TeamType.all
		@ends = []
		@venues.each do |v|
			@ends << [v.venuename, v.endone, v.endonekey]
			@ends << [v.venuename, v.endtwo, v.endtwokey]
		end
	rescue => e
		 @message = e.message + "\n " + e.backtrace.join("\n ")
		 @client = current_user
		 @caught_at = 'analysis#index'
		 ClientMailer.Error_Delivery(@message, @client, @caught_at).deliver
	end
  end
  

  def generate 
	
		lastXmatches = params[:filters][:lxm].to_i
		if lastXmatches == -2
			topmatchkeys = Scorecard.select('matchkey').uniq
		else
			topmatchkeys = Scorecard.limit(lastXmatches).select('matchkey').order('matchkey desc').uniq
		end
		
		min_of_top_matchkeys = topmatchkeys.min_by(&:matchkey).matchkey
		
		analysiskey = params[:filters][:akey]
		clientkey = params[:filters][:clkey]	
		countrykey = params[:filters][:ckey]
		formatkey = params[:filters][:fkey]
		tournamentkey = params[:filters][:tkey]
		venuekey = params[:filters][:vkey]
		teamtypekey = params[:filters][:ttkey]
		teamkey = params[:filters][:tmkey]
		matchtypekey = params[:filters][:mtkey]
		coachkey = params[:filters][:chkey]
		managerkey = params[:filters][:mkey]
		playertypename = params[:filters][:ptname]
		#playerkey = params[:filters][:pkey]
		batsmankey = params[:filters][:btkey]
		endkey = params[:filters][:ekey]
		battingstylename = params[:filters][:bts]
		bowlingtypename = params[:filters][:btn]
		bowlingstylename = params[:filters][:bls]
		battingposition = params[:filters][:bp]
		bowlingposition = params[:filters][:blp]
		inningkey = params[:filters][:inn]
		
		countrykey1 = params[:filters][:ckey1]
		formatkey1 = params[:filters][:fkey1]
		tournamentkey1 = params[:filters][:tkey1]
		venuekey1 = params[:filters][:vkey1]
		teamtypekey1 = params[:filters][:ttkey1]
		teamkey1 = params[:filters][:tmkey1]
		matchtypekey1 = params[:filters][:mtkey1]
		coachkey1 = params[:filters][:chkey1]
		managerkey1 = params[:filters][:mkey1]
		playertypename1 = params[:filters][:ptname1]
		#playerkey = params[:filters][:pkey]
		bowlerkey1 = params[:filters][:blkey1]
		endkey1 = params[:filters][:ekey1]
		battingstylename1 = params[:filters][:bts1]
		bowlingtypename1 = params[:filters][:btn1]
		bowlingstylename1 = params[:filters][:bls1]
		battingposition1 = params[:filters][:bp1]
		bowlingposition1 = params[:filters][:blp1]
		inningkey1 = params[:filters][:inn1]

		
		batsman_part = ' inner join players p on p.clientkey = s.clientkey and p.id = s.batsmankey '
		nonstriker_part = ' inner join players p2 on p2.id = s.currentbowlerkey and p2.clientkey = s.clientkey '
		country_part = ' inner join countries cn	on p.countrykey = cn.id	and p.clientkey = cn.clientkey '
		tournament_part = ' inner join tournaments t	on s.clientkey = t.clientkey and s.tournamentkey = t.id '
		venue_part =' inner join venues v on s.clientkey = v.clientkey and s.venuekey = v.id '
		team_part = ' inner join teams tm on s.clientkey = tm.clientkey and tm.playerkey = s.batsmankey '
		teamtype_part = ' inner join team_types tt on tm.teamtypekey = tt.id '
		coach_part= ' inner join coaches c on tm.coachkey = c.id	and tm.clientkey = c.clientkey '
		manager_part= ' inner join managers m on tm.managerkey = m.id and tm.clientkey = m.clientkey '
		match_part =' inner join matches mat	on mat.id = s.matchkey and mat.clientkey = s.clientkey '
		matchtype_part = ' inner join match_types mt	on mt.id = mat.matchtypekey '
		format_part = ' inner join formats f	on f.id = s.formatkey '
		bowler_part = ' inner join players p1 on s.currentbowlerkey = p1.id and s.clientkey = p1.clientkey '
		where_always_part = ' where s.clientkey = 2  and s.matchkey >= 25 '
		
		build_query = ''
		
		if batsmankey[0] != '' or countrykey[0] != '' or playertypename[0] != '' or battingstylename[0] != '' or bowlingstylename[0] != '' or playertypename[0] != '' or battingstylename[0] != ''
			build_query += batsman_part
		end
		if formatkey[0] != ''
			build_query += format_part
		end
		if tournamentkey[0] != ''
			build_query += tournament_part
		end
		if venuekey[0] != ''
			build_query+= venue_part
		end
		if teamkey[0] != ''
			build_query += team_part
		end
		if teamtypekey[0] != ''
			build_query += teamtype_part
		end
		if coachkey[0] != ''
			build_query += coach_part
		end
		if managerkey[0] != ''
			build_query += manager_part
		end
		if matchtypekey[0] != ''
			build_query += match_part+' '+matchtype_part
		end
		if bowlerkey1[0] != '' or bowlingstylename1[0] != '' or bowlingtypename1[0] != ''
			build_query += bowler_part
		end
		
		build_query += where_always_part
		
		binding.pry
		
		metric = params[:filters][:metric]
		group1 = params[:filters][:group1]
		group2 = params[:filters][:group2]
		
		if group1 == group2
			group2 = ''		
		end
		
		
		
		
		combination = countrykey.product(formatkey, tournamentkey, venuekey, teamtypekey, teamkey, matchtypekey, coachkey, managerkey, playertypename, batsmankey, endkey, battingstylename, bowlingtypename, bowlingstylename, battingposition, bowlingposition, inningkey)
		combination1 = countrykey1.product(formatkey1, tournamentkey1, venuekey1, teamtypekey1, teamkey1, matchtypekey1, coachkey1, managerkey1, playertypename1, bowlerkey1, endkey1, battingstylename1, bowlingtypename1, bowlingstylename1, battingposition1, bowlingposition1, inningkey1)

		countrykeys = formatkeys = tournamentkeys = venuekeys = teamtypekeys = teamkeys = matchtypekeys = coachkeys = managerkeys = playertypekeys = batsmankeys  = endkeys = battingstylekeys = bowlingstylekeys = bowlingtypekeys = batpositionkeys = bowlpositionkeys = inningkeys = '('
		countrykeys1 = formatkeys1 = tournamentkeys1 = venuekeys1 = teamtypekeys1 = teamkeys1 = matchtypekeys1 = coachkeys1 = managerkeys1 = playertypekeys1  = bowlerkeys1 = endkeys1 = battingstylekeys1 = bowlingstylekeys1 = bowlingtypekeys1 = batpositionkeys1 = bowlpositionkeys1 = inningkeys1 = '('
		
		iscountryempty = isformatempty = istournamentempty = isvenueempty = isteamtypeempty = isteamempty = ismatchtypeempty = iscoachempty = 0
		ismanagerempty = isplayertypeempty = isbatsmanempty  = isendempty = isbatstyleempty = isbowlstyleempty = isbowltypeempty = isbatposempty = isbowlposempty =isinningempty = 0
		
		iscountryempty1 = isformatempty1 = istournamentempty1 = isvenueempty1 = isteamtypeempty1 = isteamempty1 = ismatchtypeempty1 = iscoachempty1 = 0
		ismanagerempty1 = isplayertypeempty1  = isbowlerempty1 = isendempty1 = isbatstyleempty1 = isbowlstyleempty1 = isbowltypeempty1 = isbatposempty1 = isbowlposempty1 =isinningempty1 = 0
		
	
		for i in 0...combination.length
			countrykeys  += combination[i][0] +','
			iscountryempty = combination[i][0] == ''? 1:0
			formatkeys  += combination[i][1] +','
			isformatempty = combination[i][1] == ''? 1:0
			tournamentkeys  += combination[i][2] +','
			istournamentempty = combination[i][2] == ''? 1:0
			venuekeys  += combination[i][3] +','
			isvenueempty = combination[i][3] == ''? 1:0
			teamtypekeys  += combination[i][4] +','
			isteamtypeempty = combination[i][4] == ''? 1:0
			teamkeys  += combination[i][5] +','
			isteamempty = combination[i][5] == ''? 1:0
			matchtypekeys  += combination[i][6] +','
			ismatchtypeempty = combination[i][6] == ''? 1:0
			coachkeys  += combination[i][7] +','
			iscoachempty = combination[i][7] == ''? 1:0
			managerkeys  += combination[i][8] +','
			ismanagerempty = combination[i][8] == ''? 1:0
			playertypekeys  += '"'+combination[i][9] +'",'
			isplayertypeempty = combination[i][9] == ''? 1:0
			batsmankeys  += combination[i][10] +','
			isbatsmanempty = combination[i][10] == ''? 1:0
			endkeys  += combination[i][11] +','
			isendempty = combination[i][11] == ''? 1:0
			battingstylekeys  += '"'+combination[i][12] +'",'
			isbatstyleempty = combination[i][12] == ''? 1:0
			bowlingtypekeys  += '"'+combination[i][13] +'",'
			isbowltypeempty = combination[i][13] == ''? 1:0
			bowlingstylekeys  += '"'+combination[i][14] +'",'
			isbowlstyleempty = combination[i][14] == ''? 1:0
			batpositionkeys += combination[i][15] +','
			isbatposempty = combination[i][15] == ''? 1:0
			bowlpositionkeys += combination[i][16] +','
			isbowlposempty = combination[i][16] == ''? 1:0
			inningkeys += combination[i][17] +','
			isinningempty = combination[i][17] == ''? 1:0
		end
			
		for i in 0...combination1.length
			countrykeys1  += combination1[i][0] +','
			iscountryempty1 = combination1[i][0] == ''? 1:0
			formatkeys1  += combination1[i][1] +','
			isformatempty1 = combination1[i][1] == ''? 1:0
			tournamentkeys1  += combination1[i][2] +','
			istournamentempty1 = combination1[i][2] == ''? 1:0
			venuekeys1  += combination1[i][3] +','
			isvenueempty1 = combination1[i][3] == ''? 1:0
			teamtypekeys1  += combination1[i][4] +','
			isteamtypeempty1 = combination1[i][4] == ''? 1:0
			teamkeys1  += combination1[i][5] +','
			isteamempty1 = combination1[i][5] == ''? 1:0
			matchtypekeys1  += combination1[i][6] +','
			ismatchtypeempty1 = combination1[i][6] == ''? 1:0
			coachkeys1  += combination1[i][7] +','
			iscoachempty1 = combination1[i][7] == ''? 1:0
			managerkeys1  += combination1[i][8] +','
			ismanagerempty1 = combination1[i][8] == ''? 1:0
			playertypekeys1  += '"'+combination1[i][9] +'",'
			isplayertypeempty1 = combination1[i][9] == ''? 1:0
			bowlerkeys1  += combination1[i][10] +','
			isbowlerempty1 = combination1[i][10] == ''? 1:0
			endkeys1  += combination1[i][11] +','
			isendempty1 = combination1[i][11] == ''? 1:0
			battingstylekeys1  += '"'+combination1[i][12] +'",'
			isbatstyleempty1 = combination1[i][12] == ''? 1:0
			bowlingtypekeys1  += '"'+combination1[i][13] +'",'
			isbowltypeempty1 = combination1[i][13] == ''? 1:0
			bowlingstylekeys1  += '"'+combination1[i][14] +'",'
			isbowlstyleempty1 = combination1[i][14] == ''? 1:0
			batpositionkeys1 += combination1[i][15] +','
			isbatposempty1 = combination1[i][15] == ''? 1:0
			bowlpositionkeys1 += combination1[i][16] +','
			isbowlposempty1 = combination1[i][16] == ''? 1:0
			inningkeys1 += combination1[i][17] +','
			isinningempty1 = combination1[i][17] == ''? 1:0
		end
		countrykeys = iscountryempty == 1?  'not in (-2)':'in '+countrykeys[0...-1] + ')'
		formatkeys  = isformatempty==1? 'not in (-2)':'in '+formatkeys[0...-1] + ')'
		tournamentkeys  = istournamentempty==1? 'not in (-2)':'in '+tournamentkeys[0...-1] + ')'
		venuekeys  = isvenueempty==1? 'not in (-2)':'in '+venuekeys[0...-1] + ')'
		teamtypekeys  = isteamtypeempty==1? 'not in (-2)':'in '+teamtypekeys[0...-1] + ')'
		teamkeys  = isteamempty==1? 'not in (-2)':'in '+teamkeys[0...-1] + ')'
		matchtypekeys  = ismatchtypeempty==1? 'not in (-2)':'in '+matchtypekeys[0...-1] + ')'
		coachkeys  = iscoachempty==1? 'not in (-2)':'in '+coachkeys[0...-1] + ')'
		managerkeys  = ismanagerempty==1? 'not in (-2)':'in '+managerkeys[0...-1] + ')'
		playertypekeys  = isplayertypeempty==1? "not in ('n/a')":'in '+playertypekeys[0...-1] + ')'
		batsmankeys  = isbatsmanempty==1? 'not in (-2)':'in '+batsmankeys[0...-1] + ')'
		endkeys  = isendempty==1? 'not in (-2)':'in '+endkeys[0...-1] + ')'
		battingstylekeys  = isbatstyleempty==1? "not in ('n/a')":'in '+battingstylekeys[0...-1] + ')'
		bowlingtypekeys  = isbowltypeempty==1? "not in ('n/a')":'in '+bowlingtypekeys[0...-1] + ')'
		bowlingstylekeys  = isbowlstyleempty==1? "not in ('n/a')":'in '+bowlingstylekeys[0...-1] + ')'
		batpositionkeys  = isbatposempty==1? 'not in (-2)':'in '+batpositionkeys[0...-1] + ')'
		bowlpositionkeys  = isbowlposempty==1? 'not in (-2)':'in '+bowlpositionkeys[0...-1] + ')'
		inningkeys  = isinningempty==1? 'not in (-2)':'in '+inningkeys[0...-1] + ')'
		
		
		countrykeys1 = iscountryempty1 == 1?  'not in (-2)':'in '+countrykeys1[0...-1] + ')'
		formatkeys1  = isformatempty1==1? 'not in (-2)':'in '+formatkeys1[0...-1] + ')'
		tournamentkeys1  = istournamentempty1==1? 'not in (-2)':'in '+tournamentkeys1[0...-1] + ')'
		venuekeys1  = isvenueempty1==1? 'not in (-2)':'in '+venuekeys1[0...-1] + ')'
		teamtypekeys1  = isteamtypeempty1==1? 'not in (-2)':'in '+teamtypekeys1[0...-1] + ')'
		teamkeys1  = isteamempty1==1? 'not in (-2)':'in '+teamkeys1[0...-1] + ')'
		matchtypekeys1  = ismatchtypeempty1==1? 'not in (-2)':'in '+matchtypekeys1[0...-1] + ')'
		coachkeys1  = iscoachempty1==1? 'not in (-2)':'in '+coachkeys1[0...-1] + ')'
		managerkeys1  = ismanagerempty1==1? 'not in (-2)':'in '+managerkeys1[0...-1] + ')'
		playertypekeys1  = isplayertypeempty1==1? "not in ('n/a')":'in '+playertypekeys1[0...-1] + ')'
		bowlerkeys1  = isbowlerempty1==1? 'not in (-2)':'in '+bowlerkeys1[0...-1] + ')'
		endkeys1  = isendempty1==1? 'not in (-2)':'in '+endkeys1[0...-1] + ')'
		battingstylekeys1  = isbatstyleempty1==1? "not in ('n/a')":'in '+battingstylekeys1[0...-1] + ')'
		bowlingtypekeys1  = isbowltypeempty1==1? "not in ('n/a')":'in '+bowlingtypekeys1[0...-1] + ')'
		bowlingstylekeys1  = isbowlstyleempty1==1? "not in ('n/a')":'in '+bowlingstylekeys1[0...-1] + ')'
		batpositionkeys1  = isbatposempty1==1? 'not in (-2)':'in '+batpositionkeys1[0...-1] + ')'
		bowlpositionkeys1  = isbowlposempty1==1? 'not in (-2)':'in '+bowlpositionkeys1[0...-1] + ')'
		inningkeys1  = isinningempty1==1? 'not in (-2)':'in '+inningkeys1[0...-1] + ')'
		
		
		#player_filter = 'countrykey '+countrykeys +' and formatkey '+formatkeys + ' and playertype '+playertypekeys+ ' and id ' +playerkeys+' and battingstyle '+battingstylekeys+' and bowlingstyle '+bowlingstylekeys+' and bowlingtype '+bowlingtypekeys
		#@players = Player.where(player_filter)

		_joins = {}
		
		_group1 = {}
		_group2 = {}
		
		_group1['bts'] = 'p.battingstyle'
		_group1['bls'] = 'p.bowlingstyle'
		_group1['team'] = 'teamname'
		_group1['teamagainst'] = 'teamname'
		_group1['tournament'] = 't.name'
		_group1['venue'] = 'venuename'
		_group1['matchtype'] = 'matchtype'
		_group1['teamtype'] = 'teamtype'	
		_group1['battingposition'] = 'battingposition'
		_group1['bowlingposition'] = 'bowlingposition'
		_group1['coach'] = 'c.name'
		_group1['manager'] = 'm.name'	
		_group1['bowlingtype'] = 'p.bowlingtype'
		_group1['year'] = 'datepart(yy, scorecards.created_at)'
		_group1['inning'] = 'inning'	
		_group1['format'] = 'f.name'
		_group1['country'] = 'country'	
		_group1['countryagainst'] = 'country'
		_group1['bowler'] = 'p.fullname'
		_group1['batsman'] = 'p.fullname'
		_group1['dismissal'] = 'dismissaltype'
		_group1['cr'] = 'cr'
		_group1['pship'] = "case when currentstrikerkey<currentnonstrikerkey then p.fullname+'-'+p2.fullname else p2.fullname+'-'+p.fullname end"
	
		_group2['bts'] = ',p.battingstyle'
		_group2['bls'] = ',p.bowlingstyle'
		_group2['team'] = ',teamname'
		_group2['teamagainst'] = ',teamname'
		_group2['tournament'] = ',t.name'
		_group2['venue'] = ',venuename'
		_group2['matchtype'] = ',matchtype'
		_group2['teamtype'] = ',teamtype'	
		_group2['battingposition'] = ',battingposition'
		_group2['bowlingposition'] = ',bowlingposition'
		_group2['coach'] = ',c.name'
		_group2['manager'] = ',m.name'	
		_group2['bowlingtype'] = ',p.bowlingtype'
		_group2['year'] = ',datepart(yy, scorecards.created_at)'
		_group2['inning'] = ',inning'	
		_group2['format'] = ',f.name'
		_group2['country'] = ',country'	
		_group2['countryagainst'] = ',country'
		_group2['bowler'] = ',p.fullname'
		_group2['batsman'] = ',p.fullname'
		_group2['dismissal'] = ',dismissaltype'
		_group2['cr'] = ',cr'
		_group2['pship'] = ",case when currentstrikerkey<currentnonstrikerkey then p.fullname+'-'+p2.fullname else p2.fullname+'-'+p.fullname end"
	
				


		
		if analysiskey == 'Batting'
			#batsman_join = bts_join  = team_join = tournament_join = venue_join = matchtypes_join = teamtype_join = battingposition_join = coach_join = manager_join = year_join = inning_join = format_join = country_join = dismissal_join = pship_join = conversionratio_join = 	
			for_join = 'inner join players p 
					on p.id = scorecards.batsmankey 
				   and p.clientkey = scorecards.clientkey
				   and scorecards.batsmankey '+batsmankeys+'
				   and p.countrykey ' + countrykeys +'
				   and p.battingstyle '+battingstylekeys+' 
				   and p.bowlingstyle '+bowlingstylekeys+' 
				   and p.bowlingtype '+bowlingtypekeys+' 
				   and p.playertype '+playertypekeys+' 
			inner join players p2 
					on p2.id = scorecards.currentnonstrikerkey 
					and p2.clientkey = scorecards.clientkey
			inner join countries cn
					on cn.id = p.countrykey 
				   and cn.clientkey = p.clientkey
			inner join tournaments t
					on scorecards.tournamentkey = t.id
				   and scorecards.clientkey = t.clientkey
				   and scorecards.tournamentkey '+tournamentkeys+' 
				   and scorecards.inning '+inningkeys+'
				   and scorecards.battingposition '+batpositionkeys+'
				   and scorecards.bowlingposition '+bowlpositionkeys+'
			inner join venues v
					on scorecards.venuekey = v.id
				   and scorecards.clientkey = v.clientkey
				   and scorecards.venuekey '+venuekeys+' 
			inner join teams tm
					on scorecards.batsmankey = tm.playerkey
				   and scorecards.clientkey = tm.clientkey
				   and tm.teamtypekey '+teamtypekeys+'
				   and tm.teamid '+teamkeys+'
				   and tm.coachkey '+coachkeys+'
				   and tm.managerkey '+managerkeys+'
			inner join coaches c
					on c.id = tm.coachkey
				   and c.clientkey = tm.clientkey
			inner join managers m
					on m.id = tm.managerkey
				   and m.clientkey = tm.clientkey
			inner join team_types tt
					on tt.id = tm.teamtypekey
			inner join matches
					on matches.id = scorecards.matchkey
				   and matches.clientkey = scorecards.clientkey
			inner join match_types mt
					on mt.id = matches.matchtypekey
				   and mt.id '+matchtypekeys+'
			inner join formats f
					on f.id = scorecards.formatkey
				   and scorecards.formatkey '+formatkeys+'
			inner join players p1 
					on p1.id = scorecards.currentbowlerkey 
				   and p1.clientkey = scorecards.clientkey
			inner join countries cn1
					on cn1.id = p1.countrykey 
				   and cn1.clientkey = p1.clientkey
			inner join teams tm1
					on scorecards.currentbowlerkey = tm1.playerkey
				   and scorecards.clientkey = tm1.clientkey
				   and tm1.teamtypekey '+teamtypekeys1+'
				   and tm1.teamid '+teamkeys1+'
				   and tm1.coachkey '+coachkeys1+'
				   and tm1.managerkey '+managerkeys1+'
			where   scorecards.currentbowlerkey '+bowlerkeys1+'
				   and p1.battingstyle '+battingstylekeys1+'
				   and p1.bowlingstyle '+bowlingstylekeys1+'
				   and p1.bowlingtype '+bowlingtypekeys1+'
				   and p1.playertype '+playertypekeys1+'
				   and scorecards.tournamentkey '+tournamentkeys1+'
				   and scorecards.venuekey '+venuekeys1+'
				   and tm.teamtypekey '+teamtypekeys1+'
				   and tm.teamid '+teamkeys1+'
				   and tm.coachkey '+coachkeys1+'
				   and tm.managerkey '+managerkeys1+'
				   and mt.id '+matchtypekeys1+'
				   and scorecards.formatkey '+formatkeys1+'
				   and scorecards.inning '+inningkeys1+'
				   and scorecards.battingposition '+batpositionkeys1+'
				   and scorecards.bowlingposition '+bowlpositionkeys1+'
				   and scorecards.clientkey = '+current_user.id.to_s+'
				   and scorecards.matchkey >= '+ min_of_top_matchkeys.to_s

			#bowler_join = bls_join = bowlingposition_join = bowlingtype_join = teamagainst_join = countryagainst_join  = 
			against_join = 'inner join players p 
					on p.id = scorecards.currentbowlerkey
				   and p.clientkey = scorecards.clientkey				
				   and scorecards.currentbowlerkey '+bowlerkeys1+'
				   and p.countrykey ' + countrykeys1 +'
				   and p.battingstyle '+battingstylekeys1+' 
				   and p.bowlingstyle '+bowlingstylekeys1+' 
				   and p.bowlingtype '+bowlingtypekeys1+' 
				   and p.playertype '+playertypekeys1+' 
			inner join countries cn
					on cn.id = p.countrykey 
				   and cn.clientkey = p.clientkey	
			inner join tournaments t
					on scorecards.tournamentkey = t.id
				   and scorecards.clientkey = t.clientkey
				   and scorecards.tournamentkey '+tournamentkeys1+' 
				   and scorecards.inning '+inningkeys1+'
				   and scorecards.battingposition '+batpositionkeys1+'
				   and scorecards.bowlingposition '+bowlpositionkeys1+'
			inner join venues v
					on scorecards.venuekey = v.id
				   and scorecards.clientkey = v.clientkey
				   and scorecards.venuekey '+venuekeys1+' 
			inner join teams tm
					on scorecards.currentbowlerkey = tm.playerkey
				   and scorecards.clientkey = tm.clientkey
				   and tm.teamtypekey '+teamtypekeys1+'
				   and tm.teamid '+teamkeys1+'
				   and tm.coachkey '+coachkeys1+'
				   and tm.managerkey '+managerkeys1+'
			inner join coaches c
					on c.id = tm.coachkey
					and c.clientkey = tm.clientkey
			inner join managers m
					on m.id = tm.managerkey
					and m.clientkey = tm.clientkey
			inner join team_types tt
					on tt.id = tm.teamtypekey
			inner join matches
					on matches.id = scorecards.matchkey
					and matches.clientkey = scorecards.clientkey
			inner join match_types mt
					on mt.id = matches.matchtypekey
				   and mt.id '+matchtypekeys1+'
			inner join formats f
					on f.id = scorecards.formatkey
				   and scorecards.formatkey '+formatkeys1+'
			inner join players p1 
					on p1.id = scorecards.batsmankey 
					and p1.clientkey = scorecards.clientkey
			where  p1.countrykey '+countrykeys+'
				   and scorecards.batsmankey '+batsmankeys+'
				   and p1.battingstyle '+battingstylekeys+'
				   and p1.bowlingstyle '+bowlingstylekeys+'
				   and p1.bowlingtype '+bowlingtypekeys+'
				   and p1.playertype '+playertypekeys+'
				   and scorecards.tournamentkey '+tournamentkeys+'
				   and scorecards.venuekey '+venuekeys+'
				   and tm.teamtypekey '+teamtypekeys+'
				   and tm.teamid '+teamkeys+'
				   and tm.coachkey '+coachkeys+'
				   and tm.managerkey '+managerkeys+'
				   and mt.id '+matchtypekeys+'
				   and scorecards.formatkey '+formatkeys+'
				   and scorecards.inning '+inningkeys+'
				   and scorecards.battingposition '+batpositionkeys+'
				   and scorecards.bowlingposition '+bowlpositionkeys+'
				   and scorecards.clientkey = '+current_user.id.to_s+'
				   and scorecards.matchkey >= '+ min_of_top_matchkeys.to_s
			   
			
			against_group = ['bowler' , 'bls' , 'bowlingposition' , 'bowlingtype' , 'teamagainst' , 'countryagainst']
			if (against_group.include? group1 and !against_group.include? group2) 
				_join = against_join
				_group2['batsman'] = ',p1.fullname'
				_group2['bts'] = ',p1.battingstyle'
			elsif (against_group.include? group2 and !against_group.include? group1)		
				_join = against_join
				_group1['batsman'] = 'p1.fullname'
				_group1['bts'] = 'p1.battingstyle'
				
			else				
				_join = for_join
			end	
			


		
		else
		
			bowler_join = bowlingtype_join = bls_join = team_join = tournament_join = venue_join = matchtypes_join = teamtype_join  = bowlingposition_join = coach_join = manager_join = year_join = inning_join = format_join = country_join = dismissal_join = conversionratio_join = conversionratio_join = 'inner join players p 
											on p.id = scorecards.currentbowlerkey
											and p.clientkey = scorecards.clientkey
										   and scorecards.currentbowlerkey '+bowlerkeys1+'
										   and p.countrykey ' + countrykeys1 +'
										   and p.battingstyle '+battingstylekeys1+' 
										   and p.bowlingstyle '+bowlingstylekeys1+' 
										   and p.bowlingtype '+bowlingtypekeys1+' 
										   and p.playertype '+playertypekeys1+' 
									inner join countries cn
											on cn.id = p.countrykey 
											and cn.clientkey = p.clientkey
									inner join tournaments t
											on scorecards.tournamentkey = t.id
											and scorecards.clientkey = t.clientkey
										   and scorecards.tournamentkey '+tournamentkeys1+' 
										   and scorecards.inning '+inningkeys1+'
										   and scorecards.battingposition '+batpositionkeys1+'
										   and scorecards.bowlingposition '+bowlpositionkeys1+'
									inner join venues v
											on scorecards.venuekey = v.id
											and scorecards.clientkey = v.clientkey
										   and scorecards.venuekey '+venuekeys1+' 
									inner join teams tm
											on scorecards.batsmankey = tm.playerkey
											and scorecards.clientkey = tm.clientkey
										   and tm.teamtypekey '+teamtypekeys1+'
										   and tm.teamid '+teamkeys1+'
										   and tm.coachkey '+coachkeys1+'
										   and tm.managerkey '+managerkeys1+'
									inner join coaches c
											on c.id = tm.coachkey
											and c.clientkey = tm.clientkey
									inner join managers m
											on m.id = tm.managerkey
											and m.clientkey = tm.clientkey
									inner join team_types tt
											on tt.id = tm.teamtypekey
									inner join matches
											on matches.id = scorecards.matchkey
											and matchtes.clientkey = scorecards.clientkey
									inner join match_types mt
											on mt.id = matches.matchtypekey
										   and mt.id '+matchtypekeys1+'
									inner join formats f
											on f.id = scorecards.formatkey
										   and scorecards.formatkey '+formatkeys1+'
									inner join players p1 
											on p1.id = scorecards.batsmankey 
											and p1.clientkey = scorecards.clientkey
									where  p1.countrykey '+countrykeys+'
										   and scorecards.batsmankey '+batsmankeys+'
										   and p1.battingstyle '+battingstylekeys+'
										   and p1.bowlingstyle '+bowlingstylekeys+'
										   and p1.bowlingtype '+bowlingtypekeys+'
										   and p1.playertype '+playertypekeys+'
										   and scorecards.tournamentkey '+tournamentkeys+'
										   and scorecards.venuekey '+venuekeys+'
										   and tm.teamtypekey '+teamtypekeys+'
										   and tm.teamid '+teamkeys+'
										   and tm.coachkey '+coachkeys+'
										   and tm.managerkey '+managerkeys+'
										   and mt.id '+matchtypekeys+'
										   and scorecards.formatkey '+formatkeys+'
										   and scorecards.inning '+inningkeys+'
										   and scorecards.battingposition '+batpositionkeys+'
										   and scorecards.bowlingposition '+bowlpositionkeys+'
										   and scorecards.clientkey = '+current_user.id.to_s+'
										   and scorecards.matchkey >= '+ min_of_top_matchkeys.to_s






			batsman_join = bts_join = battingposition_join = teamagainst_join = countryagainst_join =pship_join = conversionratio_join = 'inner join players p 
									on p.id = scorecards.batsmankey 
									and p.clientkey = scorecards.clientkey
										   and p.countrykey '+countrykeys+'
										   and scorecards.batsmankey '+batsmankeys+'
										   and p.battingstyle '+battingstylekeys+' 
										   and p.bowlingstyle '+bowlingstylekeys+' 
										   and p.bowlingtype '+bowlingtypekeys+' 
										   and p.playertype '+playertypekeys+' 
									inner join players p2 
											on p2.id = scorecards.currentnonstrikerkey 
											and p2.clientkey = scorecards.clientkey
									inner join countries cn
											on cn.id = p.countrykey 
											and cn.clientkey = p.clientkey
									inner join tournaments t
											on scorecards.tournamentkey = t.id
											and scorecards.clientkey = t.clientkey
										   and scorecards.tournamentkey '+tournamentkeys+' 
										   and scorecards.inning '+inningkeys+'
										   and scorecards.battingposition '+batpositionkeys+'
										   and scorecards.bowlingposition '+bowlpositionkeys+'
									inner join venues v
											on scorecards.venuekey = v.id
											and scorecards.clientkey = v.clientkey
										   and scorecards.venuekey '+venuekeys+' 
									inner join teams tm
											on scorecards.batsmankey = tm.playerkey
											and scorecards.clientkey = tm.clientkey
										   and tm.teamtypekey '+teamtypekeys+'
										   and tm.teamid '+teamkeys+'
										   and tm.coachkey '+coachkeys+'
										   and tm.managerkey '+managerkeys+'
									inner join coaches c
											on c.id = tm.coachkey
											and c.clientkey = tm.clientkey
									inner join managers m
											on m.id = tm.managerkey
											and m.clientkey = tm.clientkey
									inner join team_types tt
											on tt.id = tm.teamtypekey
									inner join matches
											on matches.id = scorecards.matchkey
											and matches.clientkey = scorecards.clientkey
									inner join match_types mt
											on mt.id = matches.matchtypekey
										   and mt.id '+matchtypekeys+'
									inner join formats f
											on f.id = scorecards.formatkey
										   and scorecards.formatkey '+formatkeys+'
									inner join players p1 
											on p1.id = scorecards.currentbowlerkey 
											and p1.clientkey = scorecards.clientkey
									where  p1.countrykey '+countrykeys1+'
										   and scorecards.currentbowlerkey '+bowlerkeys1+'
										   and p1.battingstyle '+battingstylekeys1+'
										   and p1.bowlingstyle '+bowlingstylekeys1+'
										   and p1.bowlingtype '+bowlingtypekeys1+'
										   and p1.playertype '+playertypekeys1+'
										   and scorecards.tournamentkey '+tournamentkeys1+'
										   and scorecards.venuekey '+venuekeys1+'
										   and tm.teamtypekey '+teamtypekeys1+'
										   and tm.teamid '+teamkeys1+'
										   and tm.coachkey '+coachkeys1+'
										   and tm.managerkey '+managerkeys1+'
										   and mt.id '+matchtypekeys1+'
										   and scorecards.formatkey '+formatkeys1+'
										   and scorecards.inning '+inningkeys1+'
										   and scorecards.battingposition '+batpositionkeys1+'
										   and scorecards.bowlingposition '+bowlpositionkeys1+'
										   and scorecards.clientkey = '+current_user.id.to_s+'
										   and scorecards.matchkey >= '+ min_of_top_matchkeys.to_s

			_joins['bts'] = {'join'=> bts_join, 'group'=>'p.battingstyle'}
			_joins['bls'] = {'join'=> bls_join, 'group'=>'p.bowlingstyle'}	
			_joins['team'] = {'join'=> team_join, 'group'=>'teamname'}
			_joins['teamagainst'] = {'join'=> teamagainst_join, 'group'=>'teamname'}	
			_joins['tournament'] = {'join'=> tournament_join, 'group'=>'name'}
			_joins['venue'] = {'join'=> venue_join, 'group'=>'venuename'}		
			_joins['matchtype'] = {'join'=> matchtypes_join,'group'=>'matchtype'}	
			_joins['teamtype'] = {'join'=> teamtype_join,'group'=>'teamtype'}
			_joins['battingposition'] = {'join'=> battingposition_join,'group'=>'battingposition'}
			_joins['bowlingposition'] = {'join'=> bowlingposition_join, 'group'=>'bowlingposition'}	
			_joins['coach'] = {'join'=> coach_join,'group'=>'c.name'}
			_joins['manager'] = {'join'=> manager_join,'group'=>'m.name'}
			_joins['bowlingtype'] = {'join'=> bowlingtype_join,'group'=>'p.bowlingtype'}
			_joins['year'] = {'join'=> year_join, 'group'=>'datepart(yy, scorecards.created_at)'}
			_joins['inning'] = {'join'=> inning_join, 'group'=>'inning'}	
			_joins['format'] = {'join'=> format_join, 'group'=>'f.name'}	
			_joins['country'] = {'join'=> country_join, 'group'=>'country'}	
			_joins['countryagainst'] = {'join'=> countryagainst_join, 'group'=>'country'}		
			_joins['batsman'] = {'join'=> batsman_join, 'group'=>'p.fullname'}
			_joins['bowler'] = {'join'=> bowler_join, 'group'=>'p.fullname'}		
			_joins['dismissal'] = {'join'=> dismissal_join, 'group'=>'dismissaltype'}
			_joins['cr'] = {'join'=> conversionratio_join, 'group'=>'cr'}
			_joins['pship'] = {'join'=> pship_join, 'group'=>"case when currentstrikerkey<currentnonstrikerkey then p.fullname+'-'+p2.fullname else p2.fullname+'-'+p.fullname end"}
		end


		
		if metric == 'runs'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:runs)
			#@chartdata = Scorecard.joins(_joins[group]['join']).group('battingposition, bowlingposition').sum(:runs)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(runs) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		elsif metric == 'avg'
			@avgbybts = Scorecard.joins(_joins[group]['join']).select('case when sum(wicket)=0 then 0 else sum(runs)/sum(wicket) end as avg, '+_joins[group]['group'] +' as grp').group(_joins[group]['group'])
			@chartdata = {}
			@avgbybts.each do |a|
				@chartdata[a.grp] = a.avg	
			end
		elsif metric == 'sr'
			#@srbybts = Scorecard.joins(_joins[group]['join']).select('case when sum(ballsfaced)=0 then 0 else sum(runs)/(1.0*sum(ballsfaced))*100 end as sr, '+_joins[group]['group']+' as grp').group(_joins[group]['group'])
			#@chartdata = {}
			#@srbybts.each do |a|
			#	@chartdata[a.grp] = a.sr
			#end
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', case when sum(ballsfaced)=0 then 0 else sum(runs)/(1.0*sum(ballsfaced))*100 end as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		elsif metric == 'dsmsl'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:wicket)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(wicket) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		elsif metric == 'bbh'
			#@bbhbybts = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).select('case when count(ballsbeforerun)=0 then 0 else sum(ballsbeforerun)/(count(ballsbeforerun)*1.0) end as bbh,'+_joins[group]['group']+' as grp')
			#@chartdata = {}
			#@bbhbybts.each do |a|
			#	@chartdata[a.grp] = a.bbh
			#end
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', case when count(ballsbeforerun)=0 then 0 else sum(ballsbeforerun)/(count(ballsbeforerun)*1.0) end as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		elsif metric == 'bbb'
			#@bbbbybts = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).select('case when count(ballsbeforeboundary)=0 then 0 else sum(ballsbeforeboundary)/(count(ballsbeforeboundary)*1.0) end as bbb,'+_joins[group]['group']+' as grp')
			#@chartdata = {}
			#@bbbbybts.each do |a|
			#	@chartdata[a.grp] = a.bbb
			#end
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', case when count(ballsbeforeboundary)=0 then 0 else sum(ballsbeforeboundary)/(count(ballsbeforeboundary)*1.0) end as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))

		elsif metric == 'inns'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).count('distinct matchkey')	
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', count(distinct matchkey) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		elsif metric == 'zero'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:zeros)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(zeros) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		elsif metric == 'one'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:ones)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(ones) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))

		elsif metric == 'two'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:twos)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(twos) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		elsif metric == 'three'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:threes)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(threes) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		elsif metric == 'four'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:fours)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(fours) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		
		elsif metric == 'six'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:sixes)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(sixes) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		elsif metric == 'wides'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:wides)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(wides) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		elsif metric == 'noballs'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:noballs)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(noballs) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		elsif metric == 'byes'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:byes)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(byes) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		elsif metric == 'legbyes'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum(:legbyes)
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(legbyes) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		elsif metric == 'extras'
			#@chartdata = Scorecard.joins(_joins[group]['join']).group(_joins[group]['group']).sum('wides+noballs+byes+legbyes')		
			@chartdata = Scorecard.find_by_sql('Select '+_group1[group1]+' as grp1 '+ (!_group2[group2].nil? ? _group2[group2]+' as grp2':'')+', sum(wides+noballs+byes+legbyes) as val from scorecards '+ _join + ' group by '+_group1[group1]+(!_group2[group2].nil? ? _group2[group2]:''))
		
		end
		
		@data = Scorecard.getChartData(@chartdata, group1, group2, metric)
		


		respond_to do |format|
		  #format.json {render json:@chartdata}
		  format.json {render json:@data}
		end

  end
  
end
